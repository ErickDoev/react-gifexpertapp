{"version":3,"sources":["components/AddCategory.js","helpers/getGigfs.js","components/GifGridItem.js","components/GifGrid.js","Hooks/UseFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,cAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OAEQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGDI,MAAMF,GAHL,cAGbG,EAHa,gBAIEA,EAAIC,OAJN,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGhC,OAEI,sBAAKc,UAAU,0DAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EACZd,mBACtB,CACIqB,KAAM,GACNa,SAAS,IAJqB,mBAC/BC,EAD+B,KACxBC,EADwB,KAsBtC,OAbAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDVwBK,CAAa1B,GAAhCa,EATuB,EAS5BN,KAAaa,EATe,EASfA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,qDAAd,SAAoEhB,IACnEoB,GAAW,4CACJ,qBAAKJ,UAAU,YAAf,SASIH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADEA,EAAIC,aEM5BgB,G,MAhCM,WAAM,MAIYzC,mBAAS,CAAC,kBAJtB,mBAIhB0C,EAJgB,KAIL3C,EAJK,KAavB,OACI,qCACE,8CACE,cAAC,EAAD,CAAaA,cAAiBA,IAChC,uBACA,6BACG2C,EAAWnB,KAAI,SAAAT,GAEd,OAAO,cAAC,EAAD,CAELA,SAAYA,GADLA,aCvBvB6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ebb91212.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('Hola MUndo');\n    \n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n        \n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategories(cat => [inputValue,...cat]);\n            setInputValue('');\n        }\n        \n    }\n    return (\n\n            <form onSubmit={handleSubmit}>\n                <input \n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange} \n                />\n            </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGift = async(category) => {\n    //const url = 'api.giphy.com/v1/gifs/search?q=Naruto&limit=10&api_key=FQ8JsFPPo0PskcEDjDqDDf31qVBdtNiB';\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=FQ8JsFPPo0PskcEDjDqDDf31qVBdtNiB`;\n    const res = await fetch(url);\n    const {data} = await res.json();\n    const gifs = data.map(img => { \n        return{\n            id: img.id,\n            title: img.title,\n            //url: img.images?.downsized_medium.url\n            url: img.images.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n    \n    \n    return (\n\n        <div className=\"card animate__animated animate__delay-1s animate__swing\">  \n            <img src={ url } alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import { useFetchGifs } from \"../Hooks/UseFetchGifs\";\n\n//import React,{useState,useEffect} from 'react'\nimport { GifGridItem } from './GifGridItem';\n//import { getGift } from '../helpers/getGigfs';\n\nexport const GifGrid = ({category}) => {\n//FQ8JsFPPo0PskcEDjDqDDf31qVBdtNiB\n//api.giphy.com/v1/gifs/search\n    /*const [images, setImages] = useState([]);\n    \n    useEffect(() => {\n        getGift(category)\n        .then(setImages);\n    },[category]);*/\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__delay-1s animate__flash\">{category}</h3> \n            {loading && <h3>CARGANDO..</h3>}\n                    <div className=\"card-grid\">\n                    \n                    {\n\n                    /*images.map((img) => (\n                                    <GifGridItem \n                                    key = {img.id}\n                                    img= {img}/>\n                                ))*/\n                        images.map(img => (\n                            <GifGridItem \n                                key = {img.id} \n                                { ...img }\n                            />\n                        ))\n\n                    }\n            </div>\n        </>\n    )\n}\n","import {useState,useEffect} from 'react';\nimport  {getGift} from '../helpers/getGigfs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState(\n        {\n            data: [],\n            loading: true,\n\n        }\n    );\n\n    useEffect(() => {\n        \n        getGift(category)\n            .then(imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false,\n                });\n            })\n    \n    }, [category]);\n\n    return state;\n}","import React,{useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\n//import {AddCategory2} from './components/ AddCategory2';\nimport { GifGrid } from './components/GifGrid';\nimport './index.css';\n\nconst GifExpertApp = () => {\n\n    //const categories = ['One punch Man','Goku','Ete sech'];\n\n    const [categories,setCategories] = useState(['One Punch Man']);\n    \n    /*const handleAdd = () => {\n        setCategories([...categories, 'SOA']);\n        //setCategories(cat => [...categories,'SOA'])\n        return <li key={category}>{category}</li>\n    };*/\n\n\n    return (\n        <>\n          <h2>GifExpertApp</h2> \n            <AddCategory setCategories = {setCategories}/>\n          <hr/> \n          <ol>\n            {categories.map(category => {\n\n              return <GifGrid \n                key = {category} \n                category = {category}\n                />\n              })}\n          </ol>\n          \n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import reportWebVitals from './reportWebVitals';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}